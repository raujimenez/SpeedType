{"version":3,"sources":["components/WordDisplay.jsx","helpers/getWords.js","components/TypeSpace.jsx","App.js","serviceWorker.js","index.js"],"names":["WordDisplay","props","wordArray","word","userInputWordArray","userInput","map","val","index","length","key","style","styles","color","display","fontSize","userSelect","fetch","require","getWords","num","a","concat","response","json","TypeSpace","useState","setUserInput","wordQueue","targetWords","setWord","toLowerCase","localeCompare","filter","setWordQueue","type","value","onChange","e","handleInputChange","target","autoFocus","border","borderBottom","padding","outline","textAlign","marginTop","AppStyles","App","useEffect","initalizeWord","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.34d0236f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function WordDisplay(props) {\r\n  const wordArray = [...props.word];\r\n  const userInputWordArray = [...props.userInput];\r\n\r\n  return (\r\n    <div>\r\n      {wordArray.map((val, index) => {\r\n        if (userInputWordArray.length < index + 1) {\r\n          return (\r\n            <span key={index} style={styles}>\r\n              {val}\r\n            </span>\r\n          );\r\n        }\r\n        if (val === userInputWordArray[index]) {\r\n          return (\r\n            <span key={index} style={{ ...styles, color: \"green\" }}>\r\n              {val}\r\n            </span>\r\n          );\r\n        }\r\n        if (val !== userInputWordArray[index]) {\r\n          return (\r\n            <span key={index} style={{ ...styles, color: \"red\" }}>\r\n              {val}\r\n            </span>\r\n          );\r\n        }\r\n        return (\r\n          <span key={index} style={styles}>\r\n            {val}\r\n          </span>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst styles = {\r\n  display: \"inline-block\",\r\n  fontSize: \"10vh\",\r\n  userSelect: \"none\"\r\n};\r\n","const fetch = require(\"node-fetch\");\r\n\r\nexport default async function getWords(num) {\r\n  const URL = \"https://random-word-api.herokuapp.com/word?number=\";\r\n  const response = await fetch(URL.concat(num));\r\n  return await response.json();\r\n}\r\n","import React, { useState } from \"react\";\r\nimport getWords from \"../helpers/getWords.js\";\r\n\r\nexport default function TypeSpace(props) {\r\n  const [userInput, setUserInput] = useState(\"\");\r\n  const wordQueue = props.targetWords;\r\n\r\n  async function handleInputChange(val) {\r\n    const match = val.toLowerCase().localeCompare(wordQueue[0]) === 0;\r\n    if (!match) {\r\n      setUserInput(val.toLowerCase());\r\n      props.setUserInput(val.toLowerCase());\r\n    } else {\r\n      async function setWord() {\r\n        if (wordQueue.length === 25) {\r\n          props.setWordQueue(\r\n            wordQueue\r\n              .filter((val, index) => index !== 0)\r\n              .concat(await getWords(50))\r\n          );\r\n        } else {\r\n          props.setWordQueue(wordQueue.filter((val, index) => index !== 0));\r\n        }\r\n      }\r\n      await setWord();\r\n      setUserInput(\"\");\r\n      props.setUserInput(\"\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      value={userInput.toLowerCase()}\r\n      onChange={e => handleInputChange(e.target.value)}\r\n      style={styles}\r\n      autoFocus={true}\r\n    />\r\n  );\r\n}\r\n\r\nconst styles = {\r\n  border: \"None\",\r\n  borderBottom: \"solid 2px #eeeeee\",\r\n  padding: \"5px\",\r\n  outline: \"none\",\r\n  textAlign: \"center\",\r\n  marginTop: \"2vh\",\r\n  fontSize: \"3vh\"\r\n};\r\n","import React, { useState, useEffect } from \"react\";\n\nimport WordDisplay from \"./components/WordDisplay.jsx\";\nimport TypeSpace from \"./components/TypeSpace.jsx\";\n\nimport getWords from \"./helpers/getWords.js\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [wordQueue, setWordQueue] = useState([]);\n  const [userInput, setUserInput] = useState(\"\");\n\n  useEffect(() => {\n    async function initalizeWord() {\n      setWordQueue(await getWords(50));\n    }\n    initalizeWord();\n  }, []);\n\n  return (\n    <div className=\"App\" style={AppStyles}>\n      <WordDisplay\n        word={wordQueue.length > 0 ? wordQueue[0] : \"\"}\n        userInput={userInput}\n      />\n      <TypeSpace\n        setUserInput={setUserInput}\n        targetWords={wordQueue}\n        setWordQueue={setWordQueue}\n      />\n    </div>\n  );\n}\n\nconst AppStyles = {\n  textAlign: \"center\"\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}